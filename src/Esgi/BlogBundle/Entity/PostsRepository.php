<?php

namespace Esgi\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostsRepository extends EntityRepository
{
    private $validPostStatus = 'PubliÃ©';

    /**
     * Get post datas by it's ID joined to User's Entity.
     *
     * @return Post
     */
    public function findOneByIdJoinedToUser($id)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                SELECT p, u
                FROM EsgiBlogBundle:Posts p
                JOIN p.user u
                WHERE p.id = :id
                AND p.postStatus = :postStatus'
            )
            ->setParameter('id', $id)
            ->setParameter('p.postStatus', $this->validPostStatus)
        ;

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return;
        }
    }

    /**
     * Get post datas by it's slug joined to User's Entity.
     *
     * @return Post
     */
    public function findOneBySlugJoinedToUser($postSlug)
    {
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT p, u
            FROM EsgiBlogBundle:Posts p
            JOIN p.user u
            WHERE p.postSlug = :postSlug
            AND p.postStatus = :postStatus'
            )
            ->setParameter('postSlug', $postSlug)
            ->setParameter('postStatus', $this->validPostStatus)
        ;

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return;
        }
    }

    /**
     * Find posts by categoy id.
     *
     * @param $id
     *
     * @return array|\Doctrine\ORM\QueryBuilder
     */
    public function findByCategory($id)
    {
        $query = $this->createQueryBuilder('p')
            ->select('p')
            ->leftJoin('p.categories', 'c')
            ->addSelect('c');

        $query = $query->add('where', $query->expr()->in('c', ':c'))
            ->andWhere('p.postStatus = :postStatus')
            ->setParameter('c', $id)
            ->setParameter('postStatus', $this->validPostStatus)
            ->getQuery()
            ->getResult();

        return $query;
    }

    /**
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
    public function getList($page=1, $maxperpage=10)
    {
        $query = $this->createQueryBuilder('p')
            ->andWhere('p.postStatus = :postStatus')
            ->setParameter('postStatus', $this->validPostStatus)
            ->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage)
            ->getQuery()
    //        ->getResult()
        ;

        return new Paginator($query);
    }


    /**
     * Get count posts
     *
     * @return int
     */
    public function getPostsCount(){

        return $this->createQueryBuilder('p')
            ->select('count(p.id) as total')
            ->andWhere('p.postStatus = :postStatus')
            ->setParameter('postStatus', $this->validPostStatus)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

}
