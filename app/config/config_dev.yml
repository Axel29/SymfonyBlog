imports:
    - { resource: config.yml }

framework:
    router:
        resource: "%kernel.root_dir%/config/routing_dev.yml"
        strict_requirements: true
    profiler: { only_exceptions: false }

web_profiler:
    toolbar: true
    intercept_redirects: false

monolog:
    handlers:
        main:
            type:   stream
            path:   "%kernel.logs_dir%/%kernel.environment%.log"
            level:  debug
        console:
            type:   console
            bubble: false
            verbosity_levels:
                VERBOSITY_VERBOSE: INFO
                VERBOSITY_VERY_VERBOSE: DEBUG
            channels: ["!doctrine"]
        console_very_verbose:
            type:   console
            bubble: false
            verbosity_levels:
                VERBOSITY_VERBOSE: NOTICE
                VERBOSITY_VERY_VERBOSE: NOTICE
                VERBOSITY_DEBUG: DEBUG
            channels: ["doctrine"]
        # uncomment to get logging in your browser
        # you may have to allow bigger header sizes in your Web server configuration
        #firephp:
        #    type:   firephp
        #    level:  info
        #chromephp:
        #    type:   chromephp
        #    level:  info

assetic:
    use_controller: true

#swiftmailer:
#    delivery_address: me@example.com

#Fake Configuration
bazinga_faker:
    orm: doctrine
    locale: fr_FR
    entities:
        Esgi\UserBundle\Entity\User:
            number: 10
            custom_formatters:
                username: { method: userName }
                email: { method: safeEmail }
                enabled: { method: numberBetween, parameters: [ 0, 1 ] }
                expiresAt: { method: dateTimeThisMonth }
                credentialsExpireAt: { method: dateTimeThisMonth }
        Esgi\BlogBundle\Entity\Posts:
            number: 10
            custom_formatters:
                postStatus: { method: randomElement, parameters: [ ['Publié', 'En attente de validation', 'Supprimé' ] ]}
                postSlug: { method: slug }
                postCreatedAt: { method: dateTimeThisMonth }
                postUpdatedAt: { method: dateTimeThisMonth }
                commentsAllowed: { method: numberBetween, parameters: [ 0, 1 ] }
                commentsCount: { method: randomDigit }
                postImage: { method: image, parameters: [ 'src/Esgi/BlogBundle/Resources/public/img', '700', '250' ] }
        Esgi\BlogBundle\Entity\Comments:
            number: 10
            custom_formatters:
                commentApprouved: { method: numberBetween, parameters: [ 0, 1 ] }
                commentPostId: { method: randomDigit }
                commentAuthor: { method: randomDigit }
                commentCreatedAt: { method: dateTimeThisMonth }
                commentUpdatedAt: { method: dateTimeThisMonth }
        Esgi\BlogBundle\Entity\Categories:
            number: 10
            custom_formatters:
                categorySlug: { method: slug }
                categoryIncludeInMenu: { method: numberBetween, parameters: [ 0, 1 ]}
